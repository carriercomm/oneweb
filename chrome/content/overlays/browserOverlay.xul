<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is OneWeb.
   -
   - The Initial Developer of the Original Code is
   - ProcessOne.
   - Portions created by the Initial Developer are Copyright (C) 2009
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://oneweb/skin/browserUI/browserUI.css" type="text/css"?>

<overlay id="onewebBrowserOverlay"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script><![CDATA[
    var OneWeb = {
      init: function(service) {
        this.service = service;
        document.getElementById("contentAreaContextMenu").
          addEventListener("popupshowing", this, false);
      },

      updateContextMenu: function(popup, ev) {
        if (ev.originalTarget != popup)
          return;

        popup.childNodes[0].hidden = this.service.connected;
        popup.childNodes[1].hidden = !this.service.connected;

        while (popup.childNodes.length > 5)
          popup.removeChild(popup.childNodes[3]);

        for (var jid in this.service.commands) {
          var item = this.service.commands[jid];

          var m = document.createElement("menu");

          m.setAttribute("label", item.name+" commands");

          var p = document.createElement("menupopup");
          m.appendChild(p);

          for (var cmd in item.commands) {
            var c = document.createElement("menuitem");

            c.setAttribute("label", item.commands[cmd]);
            c.setAttribute("oncommand", "OneWeb.executeCommand(this.jid, this.command)");

            c.command = cmd;
            c.jid = jid;

            p.appendChild(c);
          }
          popup.insertBefore(m, popup.childNodes[3]);
        }

        popup.childNodes[2].hidden = popup.childNodes.length <= 5;
      },

      onStatusClick: function(event) {
        if (event.button != 0)
          return;

        var wmediator = Components.classes["@mozilla.org/appshell/window-mediator;1"].
            getService(Components.interfaces.nsIWindowMediator);

        var win = wmediator.getMostRecentWindow("ow:bookmarks");

        if (!win)
          openDialog("chrome://oneweb/content/bookmarks.xul", "_blank",
                     "resizable=yes,chrome=yes,dialog=no", this.bookmarks || [],
                     this.newBookmarks || []);
        else
          win.focus();

        this.cleanCallback();
      },

      onBookmarksChanged: function(bookmarks, newBookmarks, numNew, cleanCallback) {
        this.bookmarks = bookmarks;
        this.newBookmarks = newBookmarks;
        this.cleanCallback = cleanCallback;
      },

      onGlobalMessageChanged: function(data) {
        var si = document.getElementById("oneweb-status");

        si.setAttribute("label", data ? data.message : "OneWeb");
        si.setAttribute("messageType", data ? data.type : "");
      },

      handleEvent: function() {
        var shared = this.service.pageIsShared(gContextMenu.target.ownerDocument.location.href);
        document.getElementById("oneweb-share-page").hidden = shared;
        document.getElementById("oneweb-unshare-page").hidden = !shared;
      },

      login: function() {
        this.service.login();
      },

      logout: function() {
        this.service.logout();
      },

      prefs: function() {
        this.service.showPrefs();
      },

      sharePage: function() {
        var doc = gContextMenu.target.ownerDocument;

        this.service.sharePage(doc.location.href, doc.title);
      },

      unsharePage: function() {
        this.service.unsharePage(gContextMenu.target.ownerDocument.location.href);
      },

      executeCommand: function(jid, cmd) {
        this.service.executeCommand(jid, cmd);
      }
    }
  ]]></script>

  <statusbar id="status-bar">
    <statusbarpanel id="oneweb-status" class="statusbarpanel-iconic-text"
                    onclick="OneWeb.onStatusClick(event)"
                    tooltip="oneweb-default-tooltip"
                    context="oneweb-context">
    </statusbarpanel>
  </statusbar>

  <popupset id="mainPopupSet">
    <tooltip id="oneweb-default-tooltip">
      <label value="OneWeb"/>
    </tooltip>

    <tooltip id="oneweb-messages-tooltip"/>

    <menupopup id="oneweb-context" onpopupshowing="OneWeb.updateContextMenu(this, event)">
      <menuitem id="oneweb-login" label="Login" oncommand="OneWeb.login()"/>
      <menuitem id="oneweb-logout" label="Logout" oncommand="OneWeb.logout()"/>
      <menuseparator/>
      <menuseparator/>
      <menuitem id="oneweb-preferences" label="Preferences..." oncommand="OneWeb.prefs()"/>
    </menupopup>

    <popup id="contentAreaContextMenu">
      <menuitem id="oneweb-share-page" label="Share this page" oncommand="OneWeb.sharePage()"/>
      <menuitem id="oneweb-unshare-page" label="Stop sharing this page" oncommand="OneWeb.unsharePage()"/>
    </popup>
  </popupset>

</overlay>
