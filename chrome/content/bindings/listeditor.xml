<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is OneWeb.
   -
   - The Initial Developer of the Original Code is
   - ProcessOne.
   - Portions created by the Initial Developer are Copyright (C) 2009
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings xmlns="http://www.mozilla.org/xbl"
  xmlns:xbl="http://www.mozilla.org/xbl"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="list-editor">
    <resources>
      <stylesheet src="chrome://oneweb/skin/listeditor/listeditor.css"/>
    </resources>

    <content>
      <xul:vbox flex="1">
        <xul:verifier orient="horizontal">
          <xul:textbox type="verifiable" flex="1" xbl:inherits="regex,condition,errortext"
            oninput="this.parentNode.parentNode.parentNode._sync()"/>
          <xul:ifvalid>
            <xul:button anonid="commit" class="commit-button"
              oncommand="this.parentNode.parentNode.parentNode.parentNode._commit()"/>
            <xul:button anonid="add" class="add-button"
              oncommand="this.parentNode.parentNode.parentNode.parentNode._add()"/>
            <xul:button anonid="remove" class="remove-button"
              oncommand="this.parentNode.parentNode.parentNode.parentNode._remove()"/>
          </xul:ifvalid>
          <xul:ifinvalid>
            <xul:button class="commit-button" disabled="true"/>
            <xul:button class="add-button" disabled="true"/>
            <xul:button class="remove-button" disabled="true"/>
          </xul:ifinvalid>
        </xul:verifier>
        <xul:listbox class="list" flex="1" xbl:inherits="rows"
          onselect="this.parentNode.parentNode._select()"/>
      </xul:vbox>
    </content>

    <implementation>
      <property name="regex" onget="return this._textbox.regex"
                onset="return this._textbox.regex = val"/>
      <property name="condition" onget="return this._textbox.condition"
                onset="return this._textbox.condition = val"/>
      <property name="values" onget="return this._values">
        <setter><![CDATA[
          var i;

          i = this._list.getRowCount();
          while (i > 0)
            this._list.removeItemAt(0);

          this._hasValue = {};

          for (i = 0; i < val.length; i++) {
            this._hasValue[val[i]] = 1;
            this._list.appendItem(val[i], val[i]);
          }

          this._sync()

          return this._values = val;
        ]]></setter>
      </property>

      <constructor>
        <![CDATA[
          this._values = [];
          this._hasValue = {};

          this._textbox = document.getAnonymousElementByAttribute(this, "type", "verifiable");
          this._list = document.getAnonymousElementByAttribute(this, "class", "list");
          this._commitButton = document.getAnonymousElementByAttribute(this, "anonid", "commit")
          this._addButton = document.getAnonymousElementByAttribute(this, "anonid", "add")
          this._removeButton = document.getAnonymousElementByAttribute(this, "anonid", "remove")

          recoverSetters(this);

          this._sync();
        ]]>
      </constructor>

      <method name="_sync">
        <body><![CDATA[
          var selected = this._list.selectedItem &&
            this._list.selectedItem.label == this._textbox.value;

          this._commitButton.disabled = this._hasValue[this._textbox.value] || !this._list.selectedItem
          this._removeButton.disabled = !selected;
          this._addButton.disabled = this._hasValue[this._textbox.value];
        ]]></body>
      </method>

      <method name="_select">
        <body><![CDATA[
          this._textbox.value = this._list.selectedItem ?
            this._list.selectedItem.label  : "";
          this._sync();
        ]]></body>
      </method>

      <method name="_commit">
        <body><![CDATA[
          delete this._hasValue[this._list.selectedItem.label];
          this._hasValue[this._textbox.value] = 1;
          this._list.selectedItem.label = this._textbox.value;
          this._values[this._list.selectedIndex] = this._textbox.value;
          this._sync();
        ]]></body>
      </method>

      <method name="_add">
        <body><![CDATA[
          var i = this._list.appendItem(this._textbox.value, this._textbox.value);
          this._hasValue[this._textbox.value] = 1;
          this._values.push(this._textbox.value);
          this._list.ensureElementIsVisible(i);
          this._list.selectItem(i);
          if (this._values.length == 1) {
            var event = document.createEvent("Events");
            event.initEvent("listEmptyStateChanged", false, true);
            this.dispatchEvent(event);
          }
        ]]></body>
      </method>

      <method name="_remove">
        <body><![CDATA[
            var idx = this._list.selectedIndex;
          delete this._hasValue[this._list.selectedItem.label];
          this._values.splice(idx, 1);
          this._list.removeItemAt(idx);

          var rc = this._list.getRowCount();
          if (rc != 0)
            this._list.selectedIndex = idx == rc ? idx-1 : idx;

          if (this._values.length == 0) {
            var event = document.createEvent("Events");
            event.initEvent("listEmptyStateChanged", false, true);
            this.dispatchEvent(event);
          }
        ]]></body>
      </method>
    </implementation>
  </binding>
</bindings>
