<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is OneWeb.
   -
   - The Initial Developer of the Original Code is
   - ProcessOne.
   - Portions created by the Initial Developer are Copyright (C) 2009
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings xmlns="http://www.mozilla.org/xbl"
  xmlns:xbl="http://www.mozilla.org/xbl"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="registration-form">
    <content>
      <xul:grid anonid="form" hidden="true" flex="1">
        <xul:columns>
          <xul:column/>
          <xul:column flex="1"/>
        </xul:columns>
        <xul:rows>
          <xul:description anonid="instructions" hidden="true"/>
          <xul:row anonid="username" hidden="true">
            <xul:label value="_('Username:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="nick" hidden="true">
            <xul:label value="_('Nick:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="password" hidden="true">
            <xul:label value="_('Password:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="name" hidden="true">
            <xul:label value="_('Name:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="first" hidden="true">
            <xul:label value="_('First Name:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="last" hidden="true">
            <xul:label value="_('Last Name:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="email" hidden="true">
            <xul:label value="_('Email:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="address" hidden="true">
            <xul:label value="_('Address:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="city" hidden="true">
            <xul:label value="_('City:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="state" hidden="true">
            <xul:label value="_('State:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="zip" hidden="true">
            <xul:label value="_('ZIP:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="phone" hidden="true">
            <xul:label value="_('Phone:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="url" hidden="true">
            <xul:label value="_('URL:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="date" hidden="true">
            <xul:label value="_('Date:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="misc" hidden="true">
            <xul:label value="_('Misc:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="text" hidden="true">
            <xul:label value="_('Text:')"/>
            <xul:textbox/>
          </xul:row>
        </xul:rows>
      </xul:grid>
    </content>

    <implementation>

      <property name="form">
        <getter><![CDATA[
          return this._form;
        ]]></getter>

        <setter><![CDATA[
          this._form = val;

          if (this._xdata) {
            this._xdata.parentNode.removeChild(this._xdata);
            this._xdata = null;
          }

          var grid = document.getAnonymousElementByAttribute(this, "anonid", "form");
          if (!val) {
            grid.hidden = true;
            return;
          }

          var xdataNS = new Namespace("jabber:x:data");
          var registerNS = new Namespace("jabber:iq:register");
          var xulNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

          if (val.xdataNS::x.length()) {
            this._xdata = generateXULFromDataForm(val.xdataNS::x[0], document);
            grid.hidden = true;
            grid.parentNode.appendChild(this._xdata);
            return;
          }

          var rows = grid.lastChild.childNodes;
          for (var i = 0; i < rows.length; i++) {
            var el = val[new QName(registerNS, rows[i].getAttribute("anonid"))];
            if (el.length()) {
              if (rows[i].localName == "description") {
                if (rows[i].firstChild)
                  rows[i].removeChild(rows[i].firstChild);
                rows[i].appendChild(document.createTextNode(el.text()));
              } else
                rows[i].getElementsByTagNameNS(xulNS, "textbox")[0].value = el.text();
              rows[i].hidden = false;
            } else
              rows[i].hidden = true;
          }
          grid.hidden = false;
        ]]></setter>
      </property>

      <property name="result" readonly="true">
        <getter><![CDATA[
          if (this._xdata)
            return buildResponseDataFormFromXUL(this._xdata);

          var rows = document.getAnonymousElementByAttribute(this, "anonid", "form").
            lastChild.childNodes;
          var res = <></>;

          default xml namespace = new Namespace("jabber:x:register");
          var xulNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

          for (var i = 0; i < rows.length; i++) {
            if (rows[i].hidden || rows[i].localName == "description")
              continue;
            var name = rows[i].getAttribute("anonid");
            res += <{name}>{rows[i].getElementsByTagNameNS(xulNS, "textbox")[0].value}</{name}>;
          }
          return res;
        ]]></getter>
      </property>

      <constructor><![CDATA[
        recoverSetters(this);
      ]]></constructor>

    </implementation>
  </binding>

  <binding id="search-form">
    <content>
      <xul:grid anonid="form" hidden="true" flex="1">
        <xul:columns>
          <xul:column/>
          <xul:column flex="1"/>
        </xul:columns>
        <xul:rows>
          <xul:description anonid="instructions" hidden="true"/>
          <xul:row anonid="first" hidden="true">
            <xul:label value="_('First Name:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="last" hidden="true">
            <xul:label value="_('Last Name:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="nick" hidden="true">
            <xul:label value="_('Nick:')"/>
            <xul:textbox/>
          </xul:row>
          <xul:row anonid="email" hidden="true">
            <xul:label value="_('Email:')"/>
            <xul:textbox/>
          </xul:row>
        </xul:rows>
      </xul:grid>
    </content>

    <implementation>

      <property name="form">
        <getter><![CDATA[
          return this._form;
        ]]></getter>

        <setter><![CDATA[
          this._form = val;

          if (this._xdata) {
            this._xdata.parentNode.removeChild(this._xdata);
            this._xdata = null;
          }

          var grid = document.getAnonymousElementByAttribute(this, "anonid", "form");
          if (!val) {
            grid.hidden = true;
            return;
          }

          var xdataNS = new Namespace("jabber:x:data");
          var searchNS = new Namespace("jabber:iq:search");
          var xulNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

          if (val.xdataNS::x.length()) {
            this._xdata = generateXULFromDataForm(val.xdataNS::x[0], document);
            grid.hidden = true;
            grid.parentNode.appendChild(this._xdata);
            return;
          }

          var rows = grid.lastChild.childNodes;
          for (var i = 0; i < rows.length; i++) {
            var el = val[new QName(registerNS, rows[i].getAttribute("anonid"))];
            if (el.length()) {
              if (rows[i].localName == "instructions") {
                if (rows[i].firstChild)
                  rows[i].removeChild(rows[i].firstChild);
                rows[i].appendChild(document.createTextNode(el.text()));
              } else
                rows[i].getElementsByTagNameNS(xulNS, "textbox")[0].value = el.text();
              rows[i].hidden = false;
            } else
              rows[i].hidden = true;
          }
          grid.hidden = false;
        ]]></setter>
      </property>

      <property name="result" readonly="true">
        <getter><![CDATA[
          if (this._xdata)
            return buildResponseDataFormFromXUL(this._xdata);

          var rows = document.getAnonymousElementByAttribute(this, "anonid", "form").
            lastChild.childNodes;
          var res = <></>;

          default xml namespace = new Namespace("jabber:x:search");
          var xulNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

          for (var i = 0; i < rows.length; i++) {
            if (rows[i].hidden || rows[i].localName == "instructions")
              continue;
            var name = rows[i].getAttribute("anonid");
            var value = rows[i].getElementsByTagNameNS(xulNS, "textbox")[0].value;

            if (value)
              res += <{name}>{value}</{name}>;
          }
          return res;
        ]]></getter>
      </property>

      <constructor><![CDATA[
        recoverSetters(this);
      ]]></constructor>
    </implementation>
  </binding>
</bindings>
